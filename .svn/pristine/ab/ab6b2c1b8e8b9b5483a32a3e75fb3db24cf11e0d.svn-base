//
//  GDCoinCatalogVC.swift
//  GoldLineSwift
//
//  Created by Gaurav Singh Rawat on 30/05/17.
//  Copyright Â© 2016 MobileProgramming. All rights reserved.
//

import UIKit
import Flurry_iOS_SDK

class GDCoinCatalogVC: UIViewController, UITableViewDelegate, UITableViewDataSource,XMLParserDelegate{
    
    var coinNumber: Int!
    var str_coinName: String!
    var arrCoinCatalog: NSMutableArray?
    @IBOutlet weak var tblView: UITableView!
    
    var titleXMLData:String = ""
    var coinData:String = ""
    var categoryData: String = ""
    var nidData: String = ""
    var currentElement:String = ""
    var passData:Bool=false
    var titleName:Bool=false
    var coinImage:Bool=false
    var CategoryName:Bool=false
    var nid:Bool=false
    
    var parser = XMLParser()
    var itemArray: [String] = []
    var pubArray: [String] = []
    var summaryArray: [String] = []
    var guidArray: [String] = []
      var url:String?
    var index = 0

    
    override func viewDidLoad() {
        super.viewDidLoad()
        Flurry.logEvent("Coin Catalog")
        MBProgressHUD.showAdded(to: self.view, animated: true)
        arrCoinCatalog = NSMutableArray()
        let delegate = UIApplication.shared.delegate as! AppDelegate
        delegate.window?.bringSubview(toFront: delegate.btn_PlayOrPause)
        self.navigationController?.isNavigationBarHidden = true
        let group = DispatchGroup()
        switch (coinNumber) {
        case 0:
           // DispatchQueue.global().async(group: group, qos: .default, flags: .detached, execute: {
                 self.url = "https://www.goldline.com/iphone/coin-exclusive"
          //  })
            break;
        case 1:
          //  DispatchQueue.global().async(group: group, qos: .default, flags: .detached, execute: {
                self.url = "https://www.goldline.com/iphone/coin-gold"

          //  })
            break;
        case 2:
            
                self.url = "https://www.goldline.com/iphone/coin-silver"
            break;
        case 3:
                self.url = "https://www.goldline.com/iphone/coin-platinum"
            break;
        case 4:
                self.url = "https://www.goldline.com/iphone/coin-palladium"
            break;
        case 5:
          //  DispatchQueue.global().async(group: group, qos: .default, flags: .detached, execute: {
                self.url = "https://www.goldline.com/iphone/coin-ira"
           // })
            break;
        default:
            break;
        }
        let urlToSend: URL = URL(string: url!)!
        parser = XMLParser(contentsOf: urlToSend)!
        parser.delegate = self
        
        let success:Bool = parser.parse()
        
        if success {
            print("parse success!")
            
            print(titleXMLData)
            
            
        } else {
            print("parse failure!")
        }
        
        self.tblView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)
        
        tblView.delegate = self
        tblView.dataSource = self
    }
    
    func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) {
        currentElement=elementName;
        
        if(elementName=="Coin-Category" || elementName=="Coin-image" || elementName=="Title" || elementName=="Nid")
        {
            if(elementName=="Title"){
                titleName = true;
                titleXMLData = ""
            }
            else if(elementName=="Coin-image"){
                coinImage = true;
                coinData = ""
            }
            else if (elementName == "Coin-Category"){
                CategoryName = true
                categoryData = ""
                
            }else if (elementName == "Nid"){
                nid = true
                nidData = ""
                
            }
            
            
            passData=true;
        }
    }
    
    
    func parser(_ parser: XMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) {
        currentElement="";
        if(elementName=="Title" || elementName=="Coin-image" || elementName=="Coin-Category" || elementName=="Nid")
        {
            if(elementName=="Title"){
                titleName=false;
                itemArray.append(titleXMLData)
                titleXMLData = ""
            }
            passData=false;
            coinImage = false
            CategoryName = false
            nid = false
        }
    }
    
    func parser(_ parser: XMLParser, foundCharacters string: String) {
        
        if titleName {
            titleXMLData=titleXMLData+string
        }
        else if (coinImage)
        {
            pubArray.append(string)
        }
        else if (CategoryName){
            
            
            let rawstr = string.replacingOccurrences(of: "<p>", with: "", options: .regularExpression, range: nil)
            print("rawstr \(rawstr)")
            let removeTag = rawstr.replacingOccurrences(of: "<br>", with: "", options: .regularExpression, range: nil)
            summaryArray.append(removeTag)
        } else if (nid){
            guidArray.append(string)
        }
        
        
        
    }
    func insertElementAtIndex(element: String?, index: Int) {
        while itemArray.count < index + 1 {
            itemArray.append("")
        }
        itemArray.insert(element!, at: index)
    }
    let cellReuseIdentifier = "cell"
    
    
    func parser(_ parser: XMLParser, parseErrorOccurred parseError: Error) {
        print("failure error: ", parseError)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        let del:AppDelegate = UIApplication.shared.delegate! as! AppDelegate
        del.window!.bringSubview(toFront: del.btn_PlayOrPause!)
        self.navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.itemArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell:GDCoinCatalogTblCell = self.tblView.dequeueReusableCell(withIdentifier: "coincatalog") as! GDCoinCatalogTblCell
        
        cell.lblCell.text = self.itemArray[indexPath.row]
        var imageA = self.pubArray[indexPath.row]
        
        if imageA.contains("|") {
            let endIndex = imageA.range(of: "|")!.lowerBound
            imageA = imageA.substring(to: endIndex).trimmingCharacters(in: .whitespacesAndNewlines)
        }
        let url = NSURL(string:imageA)
        
        var data = NSData(contentsOf: url as! URL)
        cell.imgCell.image = UIImage(data:data! as Data )
        
        
        
        
        var ireEligble = self.summaryArray[indexPath.row]
        
        if ireEligble.contains("|") {
            let endIndex = ireEligble.range(of: "|")!.lowerBound
            ireEligble = ireEligble.substring(to: endIndex).trimmingCharacters(in: .whitespacesAndNewlines)
        }
        cell.lblIRA.text = ireEligble
        
              MBProgressHUD.hide(for: self.view, animated: false)

//        cell.summaryLabel.text = self.summaryArray[indexPath.row]
//        cell.guidLabel.text = self.guidArray[indexPath.row]
//        
        return cell
    }
    // method to run when table view cell is tapped
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        var ab :GDCoinCatalogTblCell = tblView.dequeueReusableCell(withIdentifier: "coincatalog") as! GDCoinCatalogTblCell
        let selectedProgram = guidArray[indexPath.row]
        
        let coinDetailVC = self.storyboard?.instantiateViewController(withIdentifier: "GDCoinCatalogDetailVC") as? GDCoinCatalogDetailVC
       // coinDetailVC?.item = arrCoinCatalog?[indexPath.row] as? GDCoinCatalogItem
      //  coinDetailVC.str_coinSelected = cell.lblCell.text
        coinDetailVC?.str_notify = "No"
        coinDetailVC?.selectedPro = selectedProgram
        self.navigationController?.pushViewController(coinDetailVC!, animated: true)
        print("You tapped cell number \(indexPath.row).")
    }



    //MARK: - UITableView
    
//    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
//        return (arrCoinCatalog?.count)!
//    }
//    
//    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
//        let cell = tableView.dequeueReusableCell(withIdentifier: "coincatalog") as! GDCoinCatalogTblCell
//        let coinitem = arrCoinCatalog?[indexPath.row] as! GDCoinCatalogItem
//        let activity = UIActivityIndicatorView(frame: CGRect(x: 0, y: 0, width: 30, height: 30))
//        activity.activityIndicatorViewStyle = .gray
//        cell.imgCell.addSubview(activity)
//        cell.imgCell.image = nil
//        AsyncImageLoader.shared().cancelLoadingImages(forTarget: cell.imgCell)
//        let range = coinitem.strImgURL?.range(of: "|")
//        if range?.lowerBound == range?.upperBound {
//            let arr = coinitem.strImgURL?.components(separatedBy: "|")
//            cell.imgCell?.imageURL = URL(string: ((arr?[0])! as String))!
//        } else {
//            cell.imgCell.imageURL = URL(string: coinitem.strImgURL!)!
//        }
//        let attrStri: NSMutableAttributedString = NSMutableAttributedString(string: coinitem.strCoinTitle!)
//        let style = NSMutableParagraphStyle()
//        style.lineSpacing = 4
//        attrStri.addAttribute(NSParagraphStyleAttributeName, value: style, range: NSMakeRange(0, attrStri.length))
//        cell.lblCell.attributedText = attrStri
//        let string = coinitem.strCoinCategory
//        let iraRange = string?.range(of: "IRA Eligible")
//        if iraRange?.lowerBound == iraRange?.upperBound {
//            cell.lblIRA.text = ""
//        } else {
//            cell.lblIRA.text = "IRA Eligible"
//        }
//        return cell
//    }
//    
//    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
//        return 86.0
//    }
//    
//    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        let cell = tableView.cellForRow(at: indexPath) as! GDCoinCatalogTblCell
//        let coinDetailVC = self.storyboard?.instantiateViewController(withIdentifier: "GDCoinCatalogDetailVC") as! GDCoinCatalogDetailVC
//        coinDetailVC.item = arrCoinCatalog?[indexPath.row] as? GDCoinCatalogItem
//        coinDetailVC.str_coinSelected = cell.lblCell.text
//        coinDetailVC.str_notify = "No"
//        self.navigationController?.pushViewController(coinDetailVC, animated: true)
//    }
//    
//    //MARK: - Local Methods
//    func loadUrl(_ strURL: String) {
//        
//        _ = TBXML(url: URL(string: strURL)!, success: { (tbxmlDocument) in
//            if (tbxmlDocument?.rootXMLElement != nil) {
//                self.traverseElement((tbxmlDocument?.rootXMLElement)!)
//                self.perform(#selector(self.reloadTable), on: .main, with: nil, waitUntilDone: false)
//            } }, failure: { (tbxmlDocument, error) in
//                DispatchQueue.main.async {
//                    MBProgressHUD.hide(for: self.view, animated: false)
//                }
//                print("XML Error \(error?.localizedDescription)")
//        })
//        
//    }
//    
//    func traverseElement(_ element: UnsafeMutablePointer<TBXMLElement>) {
//        TBXML.iterateElements(forQuery: "node", from: element) { (anElement) in
//            
//            var elem = anElement?.pointee.firstChild
//            repeat {
//                let item = GDCoinCatalogItem()
//                let name = String(cString: (elem?.pointee.name)!, encoding: .utf8)
//                
//                if name == "Title" {
//                    item.strCoinTitle = String(cString: (elem?.pointee.text)!, encoding: .utf8)?.replacingOccurrences(of: "&amp;", with: "&")
//                }
//                
//                if name == "Nid" {
//                    item.strNID = String(cString: (elem?.pointee.text)!, encoding: .utf8)
//                }
//                
//                if name == "Coin-image" {
//                    item.strImgURL = String(cString: (elem?.pointee.text)!, encoding: .utf8)
//                }
//                
//                if name == "Coin-Category" {
//                    item.strCoinCategory = String(cString: (elem?.pointee.text)!, encoding: .utf8)
//                }
//                self.arrCoinCatalog?.add(item)
//                elem = elem?.pointee.nextSibling
//            } while(elem != nil)
//        }
//        reloadTable()
//    }
//    
//    func reloadTable() {
//        MBProgressHUD.hide(for: self.view, animated: false)
//        tblView.reloadData()
//    }
    
}

